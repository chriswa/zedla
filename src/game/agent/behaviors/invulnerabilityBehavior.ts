import { ECS, EntityId } from '@/game/ecs/ecs'
import { InvulnerabilityBit, InvulnerabilityBitfield } from '@/types/invulnerability'
import { assert } from '@/util/assert'
import { singleton } from 'tsyringe'

@singleton()
export class InvulnerabilityBehavior {
  constructor(private ecs: ECS) {}

  setInvulnerable(entityId: EntityId, bit: InvulnerabilityBit): void {
    const invulnerability = this.ecs.getComponent(entityId, 'InvulnerabilityComponent')
    const wasInvulnerable = this.isInvulnerableBitfield(invulnerability.bitfield)

    invulnerability.bitfield = this.setBitInBitfield(invulnerability.bitfield, bit, entityId)

    // Disable hitbox when transitioning from vulnerable to invulnerable
    if (!wasInvulnerable) {
      const hitbox = this.ecs.getComponent(entityId, 'HitboxComponent')
      hitbox.enabled = false
    }
  }

  clearInvulnerable(entityId: EntityId, bit: InvulnerabilityBit): void {
    const invulnerability = this.ecs.getComponent(entityId, 'InvulnerabilityComponent')
    const wasInvulnerable = this.isInvulnerableBitfield(invulnerability.bitfield)

    invulnerability.bitfield = this.clearBitInBitfield(invulnerability.bitfield, bit, entityId)

    // Re-enable hitbox when transitioning from invulnerable to vulnerable
    if (wasInvulnerable && !this.isInvulnerableBitfield(invulnerability.bitfield)) {
      const hitbox = this.ecs.getComponent(entityId, 'HitboxComponent')
      hitbox.enabled = true
    }
  }

  isInvulnerable(entityId: EntityId): boolean {
    const invulnerability = this.ecs.getComponent(entityId, 'InvulnerabilityComponent')
    return this.isInvulnerableBitfield(invulnerability.bitfield)
  }

  hasBit(entityId: EntityId, bit: InvulnerabilityBit): boolean {
    const invulnerability = this.ecs.getComponent(entityId, 'InvulnerabilityComponent')
    return this.hasBitInBitfield(invulnerability.bitfield, bit)
  }

  private isInvulnerableBitfield(bitfield: InvulnerabilityBitfield): boolean {
    return bitfield !== 0
  }

  private hasBitInBitfield(bitfield: InvulnerabilityBitfield, bit: InvulnerabilityBit): boolean {
    return (bitfield & bit) !== 0
  }

  private setBitInBitfield(bitfield: InvulnerabilityBitfield, bit: InvulnerabilityBit, entityId: EntityId): InvulnerabilityBitfield {
    assert(!this.hasBitInBitfield(bitfield, bit), `Entity ${entityId} already has invulnerability bit ${bit}`)
    return (bitfield | bit) as InvulnerabilityBitfield
  }

  private clearBitInBitfield(bitfield: InvulnerabilityBitfield, bit: InvulnerabilityBit, entityId: EntityId): InvulnerabilityBitfield {
    assert(this.hasBitInBitfield(bitfield, bit), `Entity ${entityId} does not have invulnerability bit ${bit} to clear`)
    return (bitfield & ~bit) as InvulnerabilityBitfield
  }
}
